{"version":3,"sources":["images/car-vector.png","containers/Navbar.js","components/Homepage.js","containers/Main.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","to","src","Logo","alt","Component","Homepage","props","handleChange","e","setState","target","name","value","handleSubmit","preventDefault","vin","state","axios","get","then","res","console","log","data","Results","newData","vinValues","hasVin","this","heading","idx","val","startsWith","push","key","onSubmit","htmlFor","id","onChange","type","Table","striped","bordered","hover","size","Main","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"kFAAAA,EAAOC,QAAU,IAA0B,wC,mMC+B5BC,E,uKAzBX,OACE,yBAAKC,UAAU,wBACb,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,iBACb,kBAAC,IAAD,CAAMC,GAAG,IAAID,UAAU,gBACrB,yBAAKE,IAAKC,IAAMC,IAAI,mBAGxB,wBAAIJ,UAAU,+BACZ,4BACE,kBAAC,IAAD,CAAMC,GAAG,SAAT,gB,GAZOI,a,wCCqFNC,E,kDApFb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAQRC,aAAe,SAAAC,GACb,EAAKC,SAAL,eAAgBD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,SAVxB,EAanBC,aAAe,SAAAL,GACbA,EAAEM,iBACF,IAAMC,EAAM,EAAKC,MAAMD,IACvBE,IAAMC,IAAN,kEAAqEH,EAArE,iBACCI,MAAK,SAAAC,GACJC,QAAQC,IAAIF,GACZC,QAAQC,IAAIF,EAAIG,KAAKC,QAAQ,IAC7B,IAAIC,EAAUL,EAAIG,KAAKC,QAAQ,GAC/B,EAAKf,SAAL,2BAAkB,EAAKO,OAAvB,IAA8BU,UAAWD,EAASE,QAAQ,KAAO,WAC/DN,QAAQC,IAAIM,KAAKZ,MAAMU,kBApB3B,EAAKV,MAAQ,CACXD,IAAK,GACLW,UAAW,GACXC,QAAQ,GALO,E,qDA2BT,IACDE,EAAWD,KAAKtB,MAAhBuB,QAEDH,EAAY,GACdI,EAAM,EACV,IAAK,IAAIC,KAAOH,KAAKZ,MAAMU,UACrBE,KAAKZ,MAAMU,UAAUK,IAAsC,mBAA9BH,KAAKZ,MAAMU,UAAUK,KAA8BA,EAAIC,WAAW,WACjGN,EAAUO,KACR,wBAAIC,IAAKJ,GACP,4BAAKC,GACL,4BAAKH,KAAKZ,MAAMU,UAAUK,MAG9BD,KAIJ,OACE,6BACE,yBAAK/B,UAAU,6CACb,yBAAKA,UAAU,YACb,4BAAK8B,GACL,0BAAM9B,UAAU,WAAWoC,SAAUP,KAAKf,cACxC,2BAAOuB,QAAQ,OAAf,uBACA,2BACErC,UAAU,eACVsC,GAAG,MACH1B,KAAK,MACL2B,SAAUV,KAAKrB,eACjB,4BACEgC,KAAK,SACLxC,UAAU,4CAFZ,gBAOJ,yBAAKA,UAAU,YACX6B,KAAKZ,MAAMW,QACT,kBAACa,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,KAAK,MACnC,+BACE,4BACE,uCACA,uCAGJ,+BACGlB,W,GA1EItB,aCORyC,EARF,SAACvC,GACZ,OACE,yBAAKP,UAAU,aACb,kBAAC,EAAD,CAAU8B,QAAQ,wB,MCWTiB,MAXf,WACE,OACE,kBAAC,IAAD,KACE,yBAAK/C,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,SCCYgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxC,MAAK,SAAAyC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,c","file":"static/js/main.b6132290.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/car-vector.927c51a3.png\";","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Logo from \"../images/car-vector.png\";\r\n\r\nclass Navbar extends Component {\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-expand\">\r\n        <div className=\"container-fluid\">\r\n          <div className=\"navbar-header\">\r\n            <Link to=\"/\" className=\"navbar-brand\">\r\n              <img src={Logo} alt=\"Warbler Home\" />\r\n            </Link>\r\n          </div>\r\n          <ul className=\"nav navbar-nav navbar-right\">\r\n            <li>\r\n              <Link to=\"/home\">Home</Link>\r\n            </li>\r\n            {/* <li>\r\n              <Link to=\"/signup\">Sign up</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/signin\">Log in</Link>\r\n            </li> */}\r\n        </ul>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport Table from \"react-bootstrap/Table\";\r\n\r\nclass Homepage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      vin: \"\",\r\n      vinValues: {},\r\n      hasVin: false\r\n    }\r\n  }\r\n\r\n  handleChange = e => {\r\n    this.setState({[e.target.name]: e.target.value});\r\n  }\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    const vin = this.state.vin;\r\n    axios.get(`https://vpic.nhtsa.dot.gov/api/vehicles/DecodeVinValues/${vin}?format=json`)\r\n    .then(res => {\r\n      console.log(res);\r\n      console.log(res.data.Results[0]);\r\n      let newData = res.data.Results[0];\r\n      this.setState({...this.state, vinValues: newData, hasVin: true}, function() {\r\n        console.log(this.state.vinValues);\r\n      });\r\n    })\r\n  }\r\n  \r\n  render() {\r\n    const {heading} = this.props;\r\n    // let vinValues = this.state.vinValues.map((key, value) => (<li key=\"{value}\">{value}</li>));\r\n    const vinValues = [];\r\n    let idx = 0;\r\n    for (let val in this.state.vinValues) {\r\n      if (this.state.vinValues[val] && this.state.vinValues[val] !== \"Not Applicable\" && !val.startsWith(\"Error\")) {\r\n        vinValues.push(\r\n          <tr key={idx}>\r\n            <td>{val}</td>\r\n            <td>{this.state.vinValues[val]}</td>\r\n          </tr>\r\n        )\r\n        idx++;\r\n      }\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"row justify-content-md-center text-center\">\r\n          <div className=\"col-md-6\">\r\n            <h2>{heading}</h2>\r\n            <form className=\"form-vin\" onSubmit={this.handleSubmit}>\r\n              <label htmlFor=\"vin\">Enter a VIN Number:</label>\r\n              <input \r\n                className=\"form-control\" \r\n                id=\"vin\" \r\n                name=\"vin\" \r\n                onChange={this.handleChange} />\r\n              <button \r\n                type=\"submit\"\r\n                className=\"btn btn-primary btn-block btn-lg btn-vin\">\r\n                  Decode VIN\r\n              </button>\r\n            </form>\r\n          </div>\r\n          <div className=\"col-md-8\">\r\n            { this.state.hasVin &&\r\n                <Table striped bordered hover size=\"sm\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Element</th>\r\n                    <th>Value</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {vinValues}\r\n                </tbody>              \r\n                </Table>\r\n              }\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Homepage;","import React from \"react\";\r\nimport Homepage from \"../components/Homepage\";\r\n\r\nconst Main = (props) => {\r\n  return(\r\n    <div className=\"container\">\r\n      <Homepage heading=\"Welcome to VINfo!\" />\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Main;","import React from 'react';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport Navbar from \"./Navbar\";\nimport Main from \"./Main\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"app\">\n        <Navbar />\n        <Main />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}